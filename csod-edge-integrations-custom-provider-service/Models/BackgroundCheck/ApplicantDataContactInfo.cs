/*
 * Edge.Integration.Host.BackgroundCheck
 *
 * Edge Custom Background Check API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a custom Background Check provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge Custom Background Check Provier standards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace csod_edge_integrations_custom_provider_service.Models.BackgroundCheck
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApplicantDataContactInfo :  IEquatable<ApplicantDataContactInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicantDataContactInfo" /> class.
        /// </summary>
        /// <param name="Email">Email (required).</param>
        /// <param name="Phone">phone number.</param>
        /// <param name="HomePhone">phone number.</param>
        /// <param name="Mobile">phone number.</param>
        public ApplicantDataContactInfo(string Email = null, string Phone = null, string HomePhone = null, string Mobile = null)
        {
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for ApplicantDataContactInfo and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            this.Phone = Phone;
            this.HomePhone = HomePhone;
            this.Mobile = Mobile;
            
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// phone number
        /// </summary>
        /// <value>phone number</value>
        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// phone number
        /// </summary>
        /// <value>phone number</value>
        [DataMember(Name="homePhone")]
        public string HomePhone { get; set; }

        /// <summary>
        /// phone number
        /// </summary>
        /// <value>phone number</value>
        [DataMember(Name="mobile")]
        public string Mobile { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicantDataContactInfo {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ApplicantDataContactInfo)obj);
        }

        /// <summary>
        /// Returns true if ApplicantDataContactInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplicantDataContactInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicantDataContactInfo other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.HomePhone == other.HomePhone ||
                    this.HomePhone != null &&
                    this.HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    this.Mobile == other.Mobile ||
                    this.Mobile != null &&
                    this.Mobile.Equals(other.Mobile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.HomePhone != null)
                    hash = hash * 59 + this.HomePhone.GetHashCode();
                if (this.Mobile != null)
                    hash = hash * 59 + this.Mobile.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ApplicantDataContactInfo left, ApplicantDataContactInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplicantDataContactInfo left, ApplicantDataContactInfo right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
