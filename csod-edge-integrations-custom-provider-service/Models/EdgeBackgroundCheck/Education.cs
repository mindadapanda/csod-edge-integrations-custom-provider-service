/*
 * Edge.Integration.Host.BackgroundCheck
 *
 * Edge Custom Background Check API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a custom Background Check provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge Custom Background Check Provier standards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace csod_edge_integrations_custom_provider_service.Models.EdgeBackgroundCheck
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Education :  IEquatable<Education>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Education" /> class.
        /// </summary>
        /// <param name="AreaOfStudy">AreaOfStudy.</param>
        /// <param name="Minor">Minor.</param>
        /// <param name="Institution">Institution.</param>
        /// <param name="Degree">Degree.</param>
        /// <param name="Grade">Grade.</param>
        /// <param name="GraduationDate">GraduationDate.</param>
        public Education(string AreaOfStudy = null, string Minor = null, string Institution = null, string Degree = null, string Grade = null, string GraduationDate = null)
        {
            this.AreaOfStudy = AreaOfStudy;
            this.Minor = Minor;
            this.Institution = Institution;
            this.Degree = Degree;
            this.Grade = Grade;
            this.GraduationDate = GraduationDate;
            
        }

        /// <summary>
        /// Gets or Sets AreaOfStudy
        /// </summary>
        [DataMember(Name="areaOfStudy")]
        public string AreaOfStudy { get; set; }

        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [DataMember(Name="minor")]
        public string Minor { get; set; }

        /// <summary>
        /// Gets or Sets Institution
        /// </summary>
        [DataMember(Name="institution")]
        public string Institution { get; set; }

        /// <summary>
        /// Gets or Sets Degree
        /// </summary>
        [DataMember(Name="degree")]
        public string Degree { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade")]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets GraduationDate
        /// </summary>
        [DataMember(Name="graduationDate")]
        public string GraduationDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Education {\n");
            sb.Append("  AreaOfStudy: ").Append(AreaOfStudy).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Institution: ").Append(Institution).Append("\n");
            sb.Append("  Degree: ").Append(Degree).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  GraduationDate: ").Append(GraduationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Education)obj);
        }

        /// <summary>
        /// Returns true if Education instances are equal
        /// </summary>
        /// <param name="other">Instance of Education to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Education other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AreaOfStudy == other.AreaOfStudy ||
                    this.AreaOfStudy != null &&
                    this.AreaOfStudy.Equals(other.AreaOfStudy)
                ) && 
                (
                    this.Minor == other.Minor ||
                    this.Minor != null &&
                    this.Minor.Equals(other.Minor)
                ) && 
                (
                    this.Institution == other.Institution ||
                    this.Institution != null &&
                    this.Institution.Equals(other.Institution)
                ) && 
                (
                    this.Degree == other.Degree ||
                    this.Degree != null &&
                    this.Degree.Equals(other.Degree)
                ) && 
                (
                    this.Grade == other.Grade ||
                    this.Grade != null &&
                    this.Grade.Equals(other.Grade)
                ) && 
                (
                    this.GraduationDate == other.GraduationDate ||
                    this.GraduationDate != null &&
                    this.GraduationDate.Equals(other.GraduationDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AreaOfStudy != null)
                    hash = hash * 59 + this.AreaOfStudy.GetHashCode();
                if (this.Minor != null)
                    hash = hash * 59 + this.Minor.GetHashCode();
                if (this.Institution != null)
                    hash = hash * 59 + this.Institution.GetHashCode();
                if (this.Degree != null)
                    hash = hash * 59 + this.Degree.GetHashCode();
                if (this.Grade != null)
                    hash = hash * 59 + this.Grade.GetHashCode();
                if (this.GraduationDate != null)
                    hash = hash * 59 + this.GraduationDate.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Education left, Education right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Education left, Education right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
