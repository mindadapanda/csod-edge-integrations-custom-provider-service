/*
 * Edge.Integration.Host.BackgroundCheck
 *
 * Edge Custom Background Check API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a custom Background Check provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge Custom Background Check Provier standards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace csod_edge_integrations_custom_provider_service.Models.EdgeBackgroundCheck
{
    /// <summary>
    /// the standard organization units available from csod
    /// </summary>
    [DataContract]
    public partial class OrganizationUnit : IEquatable<OrganizationUnit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUnit" /> class.
        /// </summary>
        /// <param name="Division">Division.</param>
        /// <param name="Location">Location.</param>
        /// <param name="CostCenter">CostCenter.</param>
        /// <param name="Position">Position.</param>
        /// <param name="Grade">Grade.</param>
        public OrganizationUnit(string Division = null, OrganizationUnitLocation Location = null, string CostCenter = null, string Position = null, string Grade = null)
        {
            this.Division = Division;
            this.Location = Location;
            this.CostCenter = CostCenter;
            this.Position = Position;
            this.Grade = Grade;

        }

        /// <summary>
        /// Gets or Sets Division
        /// </summary>
        [DataMember(Name = "division")]
        public string Division { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location")]
        public OrganizationUnitLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets CostCenter
        /// </summary>
        [DataMember(Name = "costCenter")]
        public string CostCenter { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position")]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name = "grade")]
        public string Grade { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationUnit {\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  CostCenter: ").Append(CostCenter).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((OrganizationUnit)obj);
        }

        /// <summary>
        /// Returns true if OrganizationUnit instances are equal
        /// </summary>
        /// <param name="other">Instance of OrganizationUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationUnit other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.Division == other.Division ||
                    this.Division != null &&
                    this.Division.Equals(other.Division)
                ) &&
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) &&
                (
                    this.CostCenter == other.CostCenter ||
                    this.CostCenter != null &&
                    this.CostCenter.Equals(other.CostCenter)
                ) &&
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) &&
                (
                    this.Grade == other.Grade ||
                    this.Grade != null &&
                    this.Grade.Equals(other.Grade)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Division != null)
                    hash = hash * 59 + this.Division.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.CostCenter != null)
                    hash = hash * 59 + this.CostCenter.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.Grade != null)
                    hash = hash * 59 + this.Grade.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(OrganizationUnit left, OrganizationUnit right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrganizationUnit left, OrganizationUnit right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
