/*
 * Edge.Integration.Host.BackgroundCheck
 *
 * Edge Custom Background Check API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a custom Background Check provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge Custom Background Check Provier standards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace csod_edge_integrations_custom_provider_service.Models.EdgeBackgroundCheck
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BackgroundCheckReport :  IEquatable<BackgroundCheckReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BackgroundCheckReport" /> class.
        /// </summary>
        /// <param name="CallbackData">CallbackData (required).</param>
        /// <param name="ProviderReferenceId">some unique reference id provided by the background check provider related to the background check that was conducted (required).</param>
        /// <param name="TypeOfBackgroundCheck">the type of background check that was conducted.</param>
        /// <param name="OrderStatus">this is an enum that gets mapped, accepted values are | completed inprogress cancelled unknown (required).</param>
        /// <param name="CompletionDate">the date that the background check was completed.</param>
        /// <param name="ScreeningResult">the result of the background check, this can be a string that contains pass/fail and any associated score or relevant information.</param>
        /// <param name="ReportUrl">this is an url that will be used by the recruiter to view the results of the background check, this is an external url hosted by the background check provider.</param>
        public BackgroundCheckReport(CallbackData CallbackData = null, string ProviderReferenceId = null, string TypeOfBackgroundCheck = null, string OrderStatus = null, string CompletionDate = null, string ScreeningResult = null, string ReportUrl = null)
        {
            // to ensure "CallbackData" is required (not null)
            //if (CallbackData == null)
            //{
            //    throw new InvalidDataException("CallbackData is a required property for BackgroundCheckReport and cannot be null");
            //}
            //else
            //{
                this.CallbackData = CallbackData;
            //}
            // to ensure "ProviderReferenceId" is required (not null)
            //if (ProviderReferenceId == null)
            //{
            //    throw new InvalidDataException("ProviderReferenceId is a required property for BackgroundCheckReport and cannot be null");
            //}
            //else
            //{
                this.ProviderReferenceId = ProviderReferenceId;
            //}
            // to ensure "OrderStatus" is required (not null)
            //if (OrderStatus == null)
            //{
            //    throw new InvalidDataException("OrderStatus is a required property for BackgroundCheckReport and cannot be null");
            //}
            //else
            //{
                this.OrderStatus = OrderStatus;
            //}
            this.TypeOfBackgroundCheck = TypeOfBackgroundCheck;
            this.CompletionDate = CompletionDate;
            this.ScreeningResult = ScreeningResult;
            this.ReportUrl = ReportUrl;
            
        }

        /// <summary>
        /// Gets or Sets CallbackData
        /// </summary>
        [DataMember(Name="callbackData")]
        public CallbackData CallbackData { get; set; }

        /// <summary>
        /// some unique reference id provided by the background check provider related to the background check that was conducted
        /// </summary>
        /// <value>some unique reference id provided by the background check provider related to the background check that was conducted</value>
        [DataMember(Name="providerReferenceId")]
        public string ProviderReferenceId { get; set; }

        /// <summary>
        /// the type of background check that was conducted
        /// </summary>
        /// <value>the type of background check that was conducted</value>
        [DataMember(Name="typeOfBackgroundCheck")]
        public string TypeOfBackgroundCheck { get; set; }

        /// <summary>
        /// this is an enum that gets mapped, accepted values are | completed inprogress cancelled unknown
        /// </summary>
        /// <value>this is an enum that gets mapped, accepted values are | completed inprogress cancelled unknown</value>
        [DataMember(Name="orderStatus")]
        public string OrderStatus { get; set; }

        /// <summary>
        /// the date that the background check was completed
        /// </summary>
        /// <value>the date that the background check was completed</value>
        [DataMember(Name="completionDate")]
        public string CompletionDate { get; set; }

        /// <summary>
        /// the result of the background check, this can be a string that contains pass/fail and any associated score or relevant information
        /// </summary>
        /// <value>the result of the background check, this can be a string that contains pass/fail and any associated score or relevant information</value>
        [DataMember(Name="screeningResult")]
        public string ScreeningResult { get; set; }

        /// <summary>
        /// this is an url that will be used by the recruiter to view the results of the background check, this is an external url hosted by the background check provider
        /// </summary>
        /// <value>this is an url that will be used by the recruiter to view the results of the background check, this is an external url hosted by the background check provider</value>
        [DataMember(Name="reportUrl")]
        public string ReportUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackgroundCheckReport {\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  ProviderReferenceId: ").Append(ProviderReferenceId).Append("\n");
            sb.Append("  TypeOfBackgroundCheck: ").Append(TypeOfBackgroundCheck).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  CompletionDate: ").Append(CompletionDate).Append("\n");
            sb.Append("  ScreeningResult: ").Append(ScreeningResult).Append("\n");
            sb.Append("  ReportUrl: ").Append(ReportUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((BackgroundCheckReport)obj);
        }

        /// <summary>
        /// Returns true if BackgroundCheckReport instances are equal
        /// </summary>
        /// <param name="other">Instance of BackgroundCheckReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackgroundCheckReport other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CallbackData == other.CallbackData ||
                    this.CallbackData != null &&
                    this.CallbackData.Equals(other.CallbackData)
                ) && 
                (
                    this.ProviderReferenceId == other.ProviderReferenceId ||
                    this.ProviderReferenceId != null &&
                    this.ProviderReferenceId.Equals(other.ProviderReferenceId)
                ) && 
                (
                    this.TypeOfBackgroundCheck == other.TypeOfBackgroundCheck ||
                    this.TypeOfBackgroundCheck != null &&
                    this.TypeOfBackgroundCheck.Equals(other.TypeOfBackgroundCheck)
                ) && 
                (
                    this.OrderStatus == other.OrderStatus ||
                    this.OrderStatus != null &&
                    this.OrderStatus.Equals(other.OrderStatus)
                ) && 
                (
                    this.CompletionDate == other.CompletionDate ||
                    this.CompletionDate != null &&
                    this.CompletionDate.Equals(other.CompletionDate)
                ) && 
                (
                    this.ScreeningResult == other.ScreeningResult ||
                    this.ScreeningResult != null &&
                    this.ScreeningResult.Equals(other.ScreeningResult)
                ) && 
                (
                    this.ReportUrl == other.ReportUrl ||
                    this.ReportUrl != null &&
                    this.ReportUrl.Equals(other.ReportUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CallbackData != null)
                    hash = hash * 59 + this.CallbackData.GetHashCode();
                if (this.ProviderReferenceId != null)
                    hash = hash * 59 + this.ProviderReferenceId.GetHashCode();
                if (this.TypeOfBackgroundCheck != null)
                    hash = hash * 59 + this.TypeOfBackgroundCheck.GetHashCode();
                if (this.OrderStatus != null)
                    hash = hash * 59 + this.OrderStatus.GetHashCode();
                if (this.CompletionDate != null)
                    hash = hash * 59 + this.CompletionDate.GetHashCode();
                if (this.ScreeningResult != null)
                    hash = hash * 59 + this.ScreeningResult.GetHashCode();
                if (this.ReportUrl != null)
                    hash = hash * 59 + this.ReportUrl.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(BackgroundCheckReport left, BackgroundCheckReport right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BackgroundCheckReport left, BackgroundCheckReport right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
