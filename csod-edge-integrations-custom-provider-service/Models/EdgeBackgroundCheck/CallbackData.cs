/*
 * Edge.Integration.Host.BackgroundCheck
 *
 * Edge Custom Background Check API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a custom Background Check provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge Custom Background Check Provier standards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace csod_edge_integrations_custom_provider_service.Models.EdgeBackgroundCheck
{
    /// <summary>
    /// callback data includes the callback URL to use as well as the required callback data marked as required
    /// </summary>
    [DataContract]
    public partial class CallbackData : IEquatable<CallbackData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackData" /> class.
        /// </summary>
        /// <param name="CallbackUrl">url used to make callbacks into edge for updates to background checks.</param>
        /// <param name="ApplicantRefId">this is the reference id that needs to be provided on callbacks to help identify applicants (required).</param>
        /// <param name="ApplicantRefUserId">this is the userid reference that needs to be provided on callbacks (required).</param>
        /// <param name="ApplicantRefOrderId">this is the orderid reference that needs to be provided on callbacks (required).</param>
        public CallbackData(string CallbackUrl = null, string ApplicantRefId = null, string ApplicantRefUserId = null, string ApplicantRefOrderId = null)
        {
            // to ensure "ApplicantRefId" is required (not null)
            if (ApplicantRefId == null)
            {
                throw new InvalidDataException("ApplicantRefId is a required property for CallbackData and cannot be null");
            }
            else
            {
                this.ApplicantRefId = ApplicantRefId;
            }
            // to ensure "ApplicantRefUserId" is required (not null)
            if (ApplicantRefUserId == null)
            {
                throw new InvalidDataException("ApplicantRefUserId is a required property for CallbackData and cannot be null");
            }
            else
            {
                this.ApplicantRefUserId = ApplicantRefUserId;
            }
            // to ensure "ApplicantRefOrderId" is required (not null)
            if (ApplicantRefOrderId == null)
            {
                throw new InvalidDataException("ApplicantRefOrderId is a required property for CallbackData and cannot be null");
            }
            else
            {
                this.ApplicantRefOrderId = ApplicantRefOrderId;
            }
            this.CallbackUrl = CallbackUrl;

        }

        /// <summary>
        /// url used to make callbacks into edge for updates to background checks
        /// </summary>
        /// <value>url used to make callbacks into edge for updates to background checks</value>
        [DataMember(Name = "callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// this is the reference id that needs to be provided on callbacks to help identify applicants
        /// </summary>
        /// <value>this is the reference id that needs to be provided on callbacks to help identify applicants</value>
        [DataMember(Name = "applicantRefId")]
        public string ApplicantRefId { get; set; }

        /// <summary>
        /// this is the userid reference that needs to be provided on callbacks
        /// </summary>
        /// <value>this is the userid reference that needs to be provided on callbacks</value>
        [DataMember(Name = "applicantRefUserId")]
        public string ApplicantRefUserId { get; set; }

        /// <summary>
        /// this is the orderid reference that needs to be provided on callbacks
        /// </summary>
        /// <value>this is the orderid reference that needs to be provided on callbacks</value>
        [DataMember(Name = "applicantRefOrderId")]
        public string ApplicantRefOrderId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallbackData {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  ApplicantRefId: ").Append(ApplicantRefId).Append("\n");
            sb.Append("  ApplicantRefUserId: ").Append(ApplicantRefUserId).Append("\n");
            sb.Append("  ApplicantRefOrderId: ").Append(ApplicantRefOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CallbackData)obj);
        }

        /// <summary>
        /// Returns true if CallbackData instances are equal
        /// </summary>
        /// <param name="other">Instance of CallbackData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallbackData other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.CallbackUrl == other.CallbackUrl ||
                    this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(other.CallbackUrl)
                ) &&
                (
                    this.ApplicantRefId == other.ApplicantRefId ||
                    this.ApplicantRefId != null &&
                    this.ApplicantRefId.Equals(other.ApplicantRefId)
                ) &&
                (
                    this.ApplicantRefUserId == other.ApplicantRefUserId ||
                    this.ApplicantRefUserId != null &&
                    this.ApplicantRefUserId.Equals(other.ApplicantRefUserId)
                ) &&
                (
                    this.ApplicantRefOrderId == other.ApplicantRefOrderId ||
                    this.ApplicantRefOrderId != null &&
                    this.ApplicantRefOrderId.Equals(other.ApplicantRefOrderId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CallbackUrl != null)
                    hash = hash * 59 + this.CallbackUrl.GetHashCode();
                if (this.ApplicantRefId != null)
                    hash = hash * 59 + this.ApplicantRefId.GetHashCode();
                if (this.ApplicantRefUserId != null)
                    hash = hash * 59 + this.ApplicantRefUserId.GetHashCode();
                if (this.ApplicantRefOrderId != null)
                    hash = hash * 59 + this.ApplicantRefOrderId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CallbackData left, CallbackData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CallbackData left, CallbackData right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
